// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: pkg/local/lib/loopdevice.proto

package lib

import (
	context "context"
	"github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = proto.ProtoPackageIsVersion2

// LoopDeviceClient is the client API for LoopDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoopDeviceClient interface {
	CreateLoopDevice(ctx context.Context, in *CreateLoopDeviceRequest, opts ...grpc.CallOption) (*CreateLoopDeviceReply, error)
	DeleteLoopDevice(ctx context.Context, in *DeleteLoopDeviceRequest, opts ...grpc.CallOption) (*DeleteLoopDeviceReply, error)
}

type loopDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoopDeviceClient(cc grpc.ClientConnInterface) LoopDeviceClient {
	return &loopDeviceClient{cc}
}

func (c *loopDeviceClient) CreateLoopDevice(ctx context.Context, in *CreateLoopDeviceRequest, opts ...grpc.CallOption) (*CreateLoopDeviceReply, error) {
	out := new(CreateLoopDeviceReply)
	err := c.cc.Invoke(ctx, "/proto.LoopDevice/CreateLoopDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loopDeviceClient) DeleteLoopDevice(ctx context.Context, in *DeleteLoopDeviceRequest, opts ...grpc.CallOption) (*DeleteLoopDeviceReply, error) {
	out := new(DeleteLoopDeviceReply)
	err := c.cc.Invoke(ctx, "/proto.LoopDevice/DeleteLoopDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoopDeviceServer is the server API for LoopDevice service.
// All implementations must embed UnimplementedLoopDeviceServer
// for forward compatibility
type LoopDeviceServer interface {
	CreateLoopDevice(context.Context, *CreateLoopDeviceRequest) (*CreateLoopDeviceReply, error)
	DeleteLoopDevice(context.Context, *DeleteLoopDeviceRequest) (*DeleteLoopDeviceReply, error)
	// mustEmbedUnimplementedLoopDeviceServer()
}

// UnimplementedLoopDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedLoopDeviceServer struct {
}

func (UnimplementedLoopDeviceServer) CreateLoopDevice(context.Context, *CreateLoopDeviceRequest) (*CreateLoopDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoopDevice not implemented")
}
func (UnimplementedLoopDeviceServer) DeleteLoopDevice(context.Context, *DeleteLoopDeviceRequest) (*DeleteLoopDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoopDevice not implemented")
}
func (UnimplementedLoopDeviceServer) mustEmbedUnimplementedLoopDeviceServer() {}

// UnsafeLoopDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoopDeviceServer will
// result in compilation errors.
type UnsafeLoopDeviceServer interface {
	mustEmbedUnimplementedLoopDeviceServer()
}

func RegisterLoopDeviceServer(s *grpc.Server, srv LoopDeviceServer) {
	s.RegisterService(&LoopDevice_ServiceDesc, srv)
}

func _LoopDevice_CreateLoopDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoopDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoopDeviceServer).CreateLoopDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoopDevice/CreateLoopDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoopDeviceServer).CreateLoopDevice(ctx, req.(*CreateLoopDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoopDevice_DeleteLoopDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoopDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoopDeviceServer).DeleteLoopDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoopDevice/DeleteLoopDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoopDeviceServer).DeleteLoopDevice(ctx, req.(*DeleteLoopDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoopDevice_ServiceDesc is the grpc.ServiceDesc for LoopDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoopDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoopDevice",
	HandlerType: (*LoopDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoopDevice",
			Handler:    _LoopDevice_CreateLoopDevice_Handler,
		},
		{
			MethodName: "DeleteLoopDevice",
			Handler:    _LoopDevice_DeleteLoopDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/local/lib/loopdevice.proto",
}
